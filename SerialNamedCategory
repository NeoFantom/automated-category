from BaseCategory import *
import itertools


class NamedObject(Object):
    def __init__(self, name: str, category: Category = None) -> None:
        """Omit category only when Object.__init__(category) has been called"""
        if category is not None:
            super().__init__(category)
        self.name = name
    
    def __repr__(self) -> str:
        return self.name
    
    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name
        self.identity.__class__ = NamedMorphism
        self.identity.name = f'{self.category.name}_morId{self.name}'
    
class NamedMorphism(Morphism):
    def __init__(self, name: str, domain: Object = None, codomain: Object = None) -> None:
        """`NamedMorphism()` should not be called. Use factory method `NamedMorphism.construct()`."""
        if domain and codomain:
            super().__init__(domain, codomain)
        self.name = name

    def __repr__(self) -> str:
        return self.name
    
    @property
    def name(self):
        return self._name
    
    @name.setter
    def name(self, name):
        print('NamedMorphism.name.setter() is called')
        self._name = name
    
    @classmethod
    def construct(cls, domain: Object, codomain: Object, name: str) -> Morphism:
        newMorphism = super().construct(domain, codomain, name=name)
        return newMorphism

class SerialNamedCategory(Category):
    def __init__(self, name: str) -> None:
        super().__init__(name)
        self._objectCounter = itertools.count()
        self._morphismCounter = itertools.count()

    @property
    def _nextObjectId(self) -> int:
        return self._objectCounter.__next__()
    
    @property
    def _nextMorphismId(self) -> int:
        return self._morphismCounter.__next__()
    
    def _newObject(self) -> NamedObject:
        newObject = super()._newObject()
        newObject.__class__ = NamedObject
        name = f'{newObject.category.name}{self._nextObjectId}'
        NamedObject.__init__(newObject, name)
        return newObject
    
    def _newMorphism(self, domain: NamedObject, codomain: NamedObject) -> NamedMorphism:
        newMorphism = super()._newMorphism(domain, codomain)
        newMorphism.__class__ = NamedMorphism
        name = f'{newMorphism.category.name}_mor{self._nextMorphismId}'
        NamedMorphism
        return newMorphism